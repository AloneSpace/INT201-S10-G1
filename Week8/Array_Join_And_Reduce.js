let thai_fruit = ["ü•≠", "üçç", "ü••"]; //‡∏Å‡∏≥‡∏´‡∏ô‡∏î Array ‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
let other_fruit = ["üçá", "ü•ù", "ü´ê"]; //‡∏Å‡∏≥‡∏´‡∏ô‡∏î Array ‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏ô‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢

/*
    join() ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ô‡∏≥ String ‡∏´‡∏£‡∏∑‡∏≠ Separator ‡∏°‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î Output ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
    return String
*/

//* ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 1
//* ‡∏ô‡∏≥ thai_fruit ‡∏Å‡∏±‡∏ö other_fruit ‡∏°‡∏≤‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Separator ‡πÅ‡∏•‡∏∞ join (‡πÅ‡∏ö‡πà‡∏á) ‡∏î‡πâ‡∏ß‡∏¢ comma (,)
let all_fruit = [...thai_fruit, ...other_fruit].join(", ");

console.log(all_fruit); //* Output: ü•≠, üçç, ü••, üçá, ü•ù, ü´ê

//* ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 2 = ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á Function reduce()
/**
 * ‡πÄ‡∏õ‡πá‡∏ô Function ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * @param {Array} array ‡πÄ‡∏õ‡πá‡∏ô Array ‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡πÑ‡∏°‡πâ
 * @returns {number} ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÑ‡∏°‡πâ‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏ó‡∏±‡πâ‡∏á
 */
function sum_fruit(array = []) {
    /**
     * reduce = ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á Array
     * @param {number} prev ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
     * @param {fruit} fruit element ‡∏Ç‡∏≠‡∏á Array ‡∏ì ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ Object
     * @returns {number} ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
     */
    return array.reduce((prev, fruit) => fruit.qty + prev, 0);
}

//* ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 3 = ‡∏Å‡∏≤‡∏£ Pass Array ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Function sum_fruit
let s10_have_fruit = [
    { name: "ü•≠", qty: 5 },
    { name: "ü••", qty: 2 },
    { name: "ü´ê", qty: 3 },
    ,
]; //* ‡∏Å‡∏≥‡∏ô‡∏´‡∏î‡πÉ‡∏´‡πâ s10_have_fruit ‡πÄ‡∏õ‡πá‡∏ô Array Object ‡∏ó‡∏µ‡πà‡∏°‡∏±‡∏ú‡∏•‡πÑ‡∏°‡πâ

//* ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Function sum_fruit()
let sum_total_fruits = sum_fruit(s10_have_fruit);

console.log(sum_total_fruits); //* Output: 10
